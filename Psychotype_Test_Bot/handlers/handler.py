from aiogram import types, Dispatcher
from create_bot import bot
from keyboards import keyboard
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from package_database import base_questions, base_user


START = """
üåé–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start
üìî–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - /info
üö©–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç - /begin_test
‚ôª–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç—ã - /load
üéØ–£–∑–Ω–∞—Ç—å –ø—Å–∏—Ö–æ—Ç–∏–ø - /psychotype
"""

INFO = """–¢–µ—Å—Ç —Ç–∏–ø–æ–ª–æ–≥–∏–∏ MBTI - —ç—Ç–æ –º–µ—Ç–æ–¥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø–∏—Å–∞—Ç—å –∏ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º –º–∏—Ä–æ–º.
–°–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø–æ–ª–æ–≥–∏–∏ MBTI –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å 16 —Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∏—á–∞—é—â–∏—Ö—Å—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ —Ä–µ–∞–∫—Ü–∏—è–º–∏, —Å—Ç–µ–ø–µ–Ω—å—é –≤–æ–∑–±—É–¥–∏–º–æ—Å—Ç–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º–∏.
–î–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é KPMI, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è <b>60 –≤–æ–ø—Ä–æ—Å–æ–≤ (5-6 –º–∏–Ω)</b>

–î–∞–Ω–Ω–∞—è —Ç–∏–ø–æ–ª–æ–≥–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —á–µ—Ç—ã—Ä–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:

‚Ä¢ <b>E‚ÄîI ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏:</b>
–ï (–ïxtraversion, —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è) ‚Äî –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –º–∏—Ä;
I (Introversion, –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏—è) ‚Äî –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä;

‚Ä¢ <b>S‚ÄîN ‚Äî —Å–ø–æ—Å–æ–± –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏:</b>
S (Sensing, –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª) ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é;
N (iNtuition, –∏–Ω—Ç—É–∏—Ü–∏—è) ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ–±–æ–±—â—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é;

‚Ä¢ <b>T‚ÄîF ‚Äî –æ—Å–Ω–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π:</b>
T (Thinking, –º—ã—à–ª–µ–Ω–∏–µ) ‚Äî —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤;
F (Feeling, —á—É–≤—Å—Ç–≤–æ) ‚Äî –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ—Å–Ω–æ–≤–µ;

‚Ä¢ <b>J‚ÄîP ‚Äî —Å–ø–æ—Å–æ–± –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ—à–µ–Ω–∏–π:</b>
J (Judging, —Å—É–∂–¥–µ–Ω–∏–µ) ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞—Ä–∞–Ω–µ–µ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é;
P (Perception, –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ) ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –±–æ–ª—å—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –ø–æ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º.
"""

NUM = 0

DICT_ANSWER = {}


class StateAnswer(StatesGroup):
    ANS_1 = State()
    ANS_2 = State()


async def start_command(message : types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id,
                           text=START,
                           reply_markup=keyboard.kb_main, parse_mode='html')


async def info_command(message : types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id,
                           text=INFO,
                           reply_markup=keyboard.kb_main, parse_mode='html')
    photo_url = "https://i.ibb.co/3CscczV/image.png"
    await bot.send_photo(chat_id=message.from_user.id, photo=photo_url)


async def begin_test_command(message : types.Message, state: FSMContext):
    global NUM, DICT_ANSWER
    await state.finish()
    await base_user.delet(message.from_user.id)

    NUM = 0

    question = await base_questions.get_question(0) # –ø–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
    answer = await base_questions.get_answer(0) # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã

    TEXT = f"""
üö©<b>–¢–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è</b>
        
–í–æ–ø—Ä–æ—Å {1}

<b>{question}</b>
A) {answer[0][0]}
B) {answer[1][0]}
    """

    await bot.send_message(text=TEXT, reply_markup=keyboard.kb_answer, chat_id=message.from_user.id, parse_mode='html')
    DICT_ANSWER['user_id'] = message.from_user.id
    await StateAnswer.ANS_1.set()


async def last_command(message : types.Message):
    global NUM
    NUM -= 1
    if NUM < 0:
        await bot.send_message(text='–í—ã –æ—Ç–∫–∞—Ç–∏–ª–∏—Å—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤–æ–ø—Ä–æ—Å—É', reply_markup=keyboard.kb_answer, chat_id=message.from_user.id)
        NUM = 0
    question = await base_questions.get_question(NUM)
    answer = await base_questions.get_answer(NUM)

    TEXT = f""" 
–í–æ–ø—Ä–æ—Å {NUM + 1}

<b>{question}</b>
A) {answer[0][0]}
B) {answer[1][0]}
        """
    await bot.send_message(text='‚úÖ–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É', chat_id=message.from_user.id)
    await bot.send_message(text=TEXT, reply_markup=keyboard.kb_answer, chat_id=message.from_user.id, parse_mode='html')
    await StateAnswer.ANS_2.set()


async def state_answer_1(message : types.Message, state: FSMContext):
    global NUM, DICT_ANSWER
    NUM += 1
    if NUM == 60:
        DICT_ANSWER['num'] = NUM
        DICT_ANSWER[f'q{NUM}'] = message.text
        no_answer = await base_user.insert(DICT_ANSWER)
        NUM = 0
        await state.finish()
        text = """
‚úÖ–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç 
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Å–∏—Ö–æ—Ç–∏–ø –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 
/psychotype
        """
        return await bot.send_message(text=text, chat_id=message.from_user.id, reply_markup=keyboard.kb_main)

    question = await base_questions.get_question(NUM)
    answer = await base_questions.get_answer(NUM)

    TEXT = f""" 
–í–æ–ø—Ä–æ—Å {NUM + 1}

<b>{question}</b>
A) {answer[0][0]}
B) {answer[1][0]}
    """

    await bot.send_message(text=TEXT, reply_markup=keyboard.kb_answer, chat_id=message.from_user.id, parse_mode='html')

    DICT_ANSWER['num'] = NUM
    DICT_ANSWER[f'q{NUM}'] = message.text
    await StateAnswer.ANS_2.set()

async def state_answer_2(message : types.Message, state: FSMContext):
    global NUM,DICT_ANSWER
    NUM += 1
    if NUM == 60:
        DICT_ANSWER['num'] = NUM
        DICT_ANSWER[f'q{NUM}'] = message.text
        await base_user.insert(DICT_ANSWER)
        NUM = 0
        await state.finish()
        text = """
‚úÖ–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç 
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø—Å–∏—Ö–æ—Ç–∏–ø –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 
/psychotype
                """
        return await bot.send_message(text= text, chat_id=message.from_user.id, reply_markup=keyboard.kb_main)

    question = await base_questions.get_question(NUM)
    answer = await base_questions.get_answer(NUM)

    TEXT = f""" 
–í–æ–ø—Ä–æ—Å {NUM + 1}

<b>{question}</b>
A) {answer[0][0]}
B) {answer[1][0]}
    """

    await bot.send_message(text=TEXT, reply_markup=keyboard.kb_answer, chat_id=message.from_user.id, parse_mode='html')

    DICT_ANSWER['num'] = NUM
    DICT_ANSWER[f'q{NUM}'] = message.text
    await StateAnswer.ANS_1.set()



async def safe_command(message : types.Message, state: FSMContext):
    global DICT_ANSWER, NUM
    DICT_ANSWER['num'] = NUM
    NUM = 0
    await base_user.insert(DICT_ANSWER)
    await bot.send_message(text='‚úÖ–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=keyboard.kb_main, chat_id=message.from_user.id)
    await bot.send_message(text=START, chat_id=message.from_user.id)
    await state.finish()


async def load_command(message : types.Message):
    global NUM, DICT_ANSWER
    DICT_ANSWER = {}
    try:
        NUM = await base_user.select_num(message.from_user.id)
        if NUM == 60:
            text = """
<b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Å—å —Ç–µ—Å—Ç</b>
üéØ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
/psychotype
üö©–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:
/begin_test
                    """
            return await bot.send_message(text=text, chat_id=message.from_user.id, parse_mode='html')
        DICT_ANSWER['user_id'] = message.from_user.id

        question = await base_questions.get_question(NUM)  # –ø–æ–ª—É—á–∞–µ–ø–º –≤–æ–ø—Ä–æ—Å
        answer = await base_questions.get_answer(NUM)  # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        TEXT = f"""
‚úÖ<b>–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã</b>
    
–í–æ–ø—Ä–æ—Å {NUM+1}

<b>{question}</b>
A) {answer[0][0]}
B) {answer[1][0]}
    """

        await bot.send_message(text=TEXT, reply_markup=keyboard.kb_answer, chat_id=message.from_user.id, parse_mode='html')
        await StateAnswer.ANS_1.set()
    except:
        await bot.send_message(text='‚õî–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', reply_markup=keyboard.kb_main, chat_id=message.from_user.id)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start', 'help'], state="*")
    dp.register_message_handler(info_command, commands=['info', 'help'], state="*")
    dp.register_message_handler(begin_test_command, commands=['begin_test'], state="*")
    dp.register_message_handler(last_command, commands=['–í–µ—Ä–Ω—É—Ç—å_–≤–æ–ø—Ä–æ—Å'], state="*")
    dp.register_message_handler(safe_command, commands=['–°–æ—Ö—Ä–∞–Ω–∏—Ç—å_–æ—Ç–≤–µ—Ç—ã'], state="*")
    dp.register_message_handler(state_answer_1, Text(equals = ['A','B']), state=StateAnswer.ANS_1)
    dp.register_message_handler(state_answer_2,Text(equals = ['A','B']), state=StateAnswer.ANS_2)
    dp.register_message_handler(load_command, commands=['load'], state="*")


